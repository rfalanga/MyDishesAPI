using MyDishesAPI.EndpointFilters;
using MyDishesAPI.EndpointHandlers;
using MyDishesAPI.Models;

namespace MyDishesAPI.Extensions;

public static class EndpointRouteBuilderExtensions
{
    public static void RegisterDishesEndpoints(this IEndpointRouteBuilder endpointRouteBuilder)
    {
        // Create a MapGroup for dishes endpoints
        var dishesEndpoints = endpointRouteBuilder.MapGroup("/dishes")
            .RequireAuthorization(); // This is what Kevin had in his code.
        var dishWithGuidIdEndpoints = dishesEndpoints.MapGroup("/{dishId:guid}");
        var dishWithGuidIdEndpointsAndLockFilters =                 // Renamed this variable to what Kevin named it in his code.
            endpointRouteBuilder.MapGroup("/dishes/{dishId:guid}")
                .RequireAuthorization("RequireAdminFromBelgium") // This is what Kevin had in his code.
                .AddEndpointFilter(new DishIsLockedFilter(new Guid("fd630a57-2352-4731-b25c-db9cc7601b16"))) // from Kevin's code, blocking 2 dishes
                .AddEndpointFilter(new DishIsLockedFilter(new Guid("eacc5169-b2a7-41ad-92c3-dbb1a5e7af06"))); // from Kevin's code, blocking 2 dishes

        // This code was generated by GitHub Copilot. It is NOT what Kevin had in his code.
        dishesEndpoints.MapGet("", DishesHandlers.GetDishesAsync)
            .WithName("GetDishes")
            .Produces<IEnumerable<DishDTO>>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status401Unauthorized);
        dishWithGuidIdEndpoints.MapGet("", DishesHandlers.GetDishByIdAsync)
            .WithName("GetDish")
            .WithOpenApi(operation =>
            {
                operation.Deprecated = true; // Marking this endpoint as deprecated
                return operation;
            })
            .WithSummary("Get a dish by providing an id")
            .WithDescription("Dishes are identified by a URI containing a dish " +
            "identifier. This identifier is a GUID. You can get one specified " +
            "dish via this endpoint by providing the identifier.")
            .Produces<DishDTO>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status404NotFound);
        dishesEndpoints.MapGet("/{dishName}", DishesHandlers.GetDishByNameAsync)
            .AllowAnonymous() // Kevin had this as an anonymous endpoint
            .WithName("GetDishByName")
            .Produces<DishDTO>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status404NotFound);
        dishesEndpoints.MapPost("", DishesHandlers.CreateDishAsync)
            .RequireAuthorization("RequireAdminFromBelgium") // This is what Kevin had in his code.
            .AddEndpointFilter<ValidateAnnotationsFilter>() // This is what Kevin had in his code.
            .ProducesValidationProblem(StatusCodes.Status400BadRequest)
            .Accepts<DishForCreationDTO>("application/json", "application/vnd.marvin.dishfor creation+json");
        dishWithGuidIdEndpoints.MapPut("", DishesHandlers.UpdateDishAsync);
        dishWithGuidIdEndpoints.MapDelete("", DishesHandlers.DeleteDishAsync)
            .AddEndpointFilter<LogNotFoundResponseFilter>();

    }

    public static void RegisterIngredientsEndpoints(this IEndpointRouteBuilder endpointRouteBuilder)
    {
        // This code was generated by GitHub Copilot. It is NOT what Kevin had in his code.
        endpointRouteBuilder.MapGet("/ingredients", IngredientsHandlers.GetIngredientByIdAsync)
            .WithName("GetAllIngredients")  // Changed from "GetIngredients" to avoid duplication
            .Produces<IEnumerable<IngredientDTO>>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status401Unauthorized);
        endpointRouteBuilder.MapGet("/ingredients/{ingredientId:guid}", IngredientsHandlers.GetIngredientByIdAsync)
            .WithName("GetIngredientById")
            .Produces<IngredientDTO>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status404NotFound);

        // Kevin is adding this code to illustrate handling exceptions with the Developer Exception Page Middleware.
        var ingredientsEndpoints = endpointRouteBuilder.MapGroup("/dishes/{dishId:guid}/ingredients")
            .RequireAuthorization();

        ingredientsEndpoints.MapGet("", IngredientsHandlers.GetIngredientByIdAsync)
            .WithName("GetDishIngredients")  // Changed from "GetIngredients" to avoid duplication
            .Produces<IEnumerable<IngredientDTO>>(StatusCodes.Status200OK)
            .Produces(StatusCodes.Status401Unauthorized);
        ingredientsEndpoints.MapPost("", () =>
        {
            throw new Exception("This is a test exception for the Developer Exception Page Middleware.");
        });
    }
}
